package ui;
/*
 *
 * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Oracle nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.ImageObserver;

/**
 * Class that loads and returns images according to
 * scale factor of graphic device
 *
 *  <pre> {@code
 *    Image image = new ScalableImage() {
 *
 *        public Image createScaledImage(float scaleFactor) {
 *            return (scaleFactor <= 1) ? loadImage("image.png")
 *                : loadImage("image@2x.png");
 *        }
 *
 *        Image loadImage(String name){
 *            // load image
 *        }
 *    };}</pre>
 */
public abstract class ScalableImage {

    Image[] images;

    public ScalableImage() {
        this.images = new Image[2];
    }

    public abstract Image createScaledImage(float scaleFactor);

    public Image getScaledImage(float scaleFactor) {
        int index = (scaleFactor <= 1) ? 0 : 1;
        Image image = images[index];

        if (image == null) {
            image = createScaledImage(scaleFactor);
            if (image == null) {
                image = getDefaultImage();
            }
            images[index] = image;
        }

        return image;
    }

    public int getWidth(ImageObserver observer) {
        return getDefaultImage().getWidth(observer);
    }

    public int getHeight(ImageObserver observer) {
        return getDefaultImage().getHeight(observer);
    }

    public Image getScaledImage(Graphics g) {
        return null;//getScaledImage(DemoImages.getScaleFactor(g));
    }

    public Image getDefaultImage() {
        return getScaledImage(1);
    }
}
